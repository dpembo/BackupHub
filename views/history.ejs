<%

function getSchedule(jobName){
  for(var i=0;i<schedules.length;i++)
  {
    if(schedules[i].jobName==jobName) return i;
  }
  return -1;
} 

function displaySecs(secs) {
  
  var ret;

  //Secs
  if (secs < 300) ret = secs + " secs";

  if (secs >= 300 && secs < 7200) {
    //Mins
    var mins = Math.floor(secs / 60);
    secs = secs % 60;

    ret = mins + " mins ";

  }
  if (secs >= 7200 && secs < 86400) {
    //hours
    var mins = Math.floor(secs / 60);
    var secs = secs % 60;
    var hours = Math.floor(mins / 60);
    mins = mins % 60;
    ret = hours + "h " + mins + " mins";
  }

  if (secs >= 86400) {
    var mins = Math.floor(secs / 60);
    var secs = secs % 60;
    var hours = Math.floor(mins / 60);
    var days = Math.floor(hours / 24);
    hours = hours - (days * 24);
    //hours = days %24;
    mins = mins % 60;
    ret = days + " days " + hours + "h ";

  }

  return ret;
}


 %>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0"/>

  <title>BackupHub | Job History</title>

  <%- include('./partials/_head'); %>
  <%- include('./partials/_scripts'); %>
  
  <style>
.toggle-row {
    transition: max-height 0.3s ease, opacity 0.3s ease, transform 0.3s ease;
    overflow: hidden;
    opacity: 0; /* Start hidden */
    max-height: 0; /* Start with 0 height */
    transform: translateY(-10px); /* Start slightly above */
}

.toggle-row.show {
    opacity: 1; /* Fade in */
    max-height: 50px; /* Set a suitable max-height for visible rows */
    transform: translateY(0); /* Move to original position */
}
  </style>
  <script>

  var order="desc";
  var sort="runDate";


  function toggleGroup(className) {
    const rows = document.querySelectorAll(`.toggle-row.${className}`);
    var elem = document.getElementById("icon-" + className.split("-")[1]);
    if(elem.innerText=="expand_more"){
      elem.innerHTML = "expand_less";
    } else {
      elem.innerHTML="expand_more";
    }

    let delay = 0;
    
    rows.forEach(row => {
        if (row.style.display === "none") {
            // Show the row
            row.style.display = "table-row"; // Use table-row for table structure
            requestAnimationFrame(() => {
                // Set the delay for each row
                row.style.transitionDelay = `${delay}ms`;
                row.classList.add('show'); // Trigger the transition
                if(rows.length>10)delay += 10;
                else delay += 100; // Increase delay for the next row (adjust as needed)
            });
        } else {
            // Hide the row
            row.classList.remove('show'); // Remove transition class
            row.addEventListener('transitionend', function() {
                row.style.display = "none"; // Hide after transition
                row.style.transitionDelay = '0ms'; // Reset delay after hiding
            }, { once: true });
        }
    });
}

  function toggleGroupOrig(groupId){

    const rows = document.querySelectorAll(`.toggle-row.${groupId}`);

        rows.forEach(row => {
            if (row.classList.contains('show')) {
                // Hide the row
                row.classList.remove('show');
            } else {
                // Show the row
                row.classList.add('show');
            }
        });
  }

  function openModal(icon,colour,name,logId) {
    //Populate the modal data
    var logData = document.getElementById(logId).innerHTML;
    document.getElementById('modal-log-data').innerHTML=logData;
    document.getElementById('modal-icon').innerHTML=icon;
    document.getElementById('modal-icon').style.color=colour;
    if(name.indexOf("||INTERNAL||")==0)name=name.substr(name.lastIndexOf("||")+2);
    document.getElementById('modal-jobname').innerHTML=name;
    //Open the modal
    var instance = M.Modal.getInstance(document.getElementById('logViewerModal'));
    instance.open();
  }

  function doNotify(status,msg)
  {
      $.pnotify({
      title: 'Backup Job',
      text: msg,
      type: status,
      history: false,
      styling: 'jqueryui'
      });
  }

    function getUrlParam(name){
      if(name=(new RegExp('[?&]'+encodeURIComponent(name)+'=([^&]*)')).exec(location.search))
        return decodeURIComponent(name[1]);
    }

    var intervalId;
    function dorefresh()
    {
      
      //alert("in do refresh");
      var refreshEnabled = document.getElementById("refreshtoggle").checked
      var refresh = document.getElementById("refreshval").value;
      //alert(refreshEnabled);
      if(refreshEnabled){
        if(parseInt(refresh)==0)refresh=3;
        refreshMs = refresh*1000;

        //refreshExecute = setInterval(refresh,refreshMs);

        intervalId = setInterval(() => {
          //alert("Timeout executed!");
            
          }, refreshMs);
      }
      else{
        clearInterval(intervalId);
      }
      
    }

    
  function showLog(index){
    elementId = "logview" + index;
    document.getElementById(elementId).style.display="block";
  }

  let refreshIntervalId;
  let hasRunningItems = false; // To track if running items exist
  
  function startAutoRefresh() {
    const refreshInterval = hasRunningItems ? 1000 : 5000; // 1 second if running, 10 seconds otherwise
    refreshIntervalId = setInterval(() => {
      fetchRunList("runList");
    }, refreshInterval); // Set dynamic interval based on job status
  }

  function stopAutoRefresh() {
    if (refreshIntervalId) {
     clearInterval(refreshIntervalId);
    }
  }

  function fetchRunList(elementId) {
  console.log("Refreshing Running List");

  const apiUrl = '/runList/data?format=HTML';
  fetch(apiUrl)
    .then(response => {
      if (!response.ok) {
        alert("response not ok: " + response.text);
        throw new Error(`Network response was not ok: ${response.status}`);
      }
      return response.text();
    })
    .then(data => {
      document.getElementById(elementId).innerHTML = data;

      const runningItemsCount = document.querySelectorAll('.runningItem').length;
      if (runningItemsCount > 0) {
        // Running items exist, set the flag
        if (!hasRunningItems) {
          hasRunningItems = true;
          stopAutoRefresh();  // Stop current refresh
          startAutoRefresh(); // Restart with 1-second interval
        }
      } else {
        // No running items now
        if (hasRunningItems) {
          console.log("Running items completed. Reloading history list...");
          fetchList('historyList', undefined, undefined);
          hasRunningItems = false;  // Reset the flag
          stopAutoRefresh();       // Stop current refresh
          startAutoRefresh();      // Restart with 10-second interval
        }
      }
    })
    .catch(error => {
      console.error('Error fetching data:', error);
      //alert("Error Fetching List data: " + error);
    });
  }

  function fetchList(elementId, inSort, inOrder, fromRefresh) {
    document.getElementById("refreshindicator").style.display = "inline-block";
    console.log("Refreshing List");

    // Default the incoming sort/order to current values if not specified
    if (inSort === undefined || inSort == null || inSort.length == 0) inSort = sort;
    if (inOrder === undefined || inOrder == null || inOrder.length == 0) inOrder = order;

    // Determine if the sort column or sort order has changed
    const sortChanged = (inSort !== sort);
    const orderChanged = (inOrder !== order);

    // Update the sorting icons and titles
    document.getElementById(sort + "-SortIcon").innerText = "";
    document.getElementById(sort + "-SortIcon").title = "";

    var sortDir = "up";
    var descr = "Ascending";
    if (inOrder == "desc") {
        sortDir = "down";
        descr = "Descending";
    }

    // Update the current sort and order
    order = inOrder;
    sort = inSort;

    document.getElementById(sort + "-SortIcon").innerText = "arrow_drop_" + sortDir;
    document.getElementById(sort + "-SortIcon").title = descr;

    // Track the currently opened groups only if the sort column and order haven't changed
    let openGroups = [];
    if (!sortChanged && !orderChanged) {
        openGroups = Array.from(document.querySelectorAll('.group-header')).filter(header => {
            const groupId = header.querySelector('span').id.split('-')[1];
            const rows = document.querySelectorAll(`.toggle-row.group-${groupId}`);
            return Array.from(rows).some(row => row.style.display === 'table-row');
        }).map(header => header.querySelector('span').id.split('-')[1]);
    }

    // Fetch the updated list
    const apiUrl = '/historyList/data?format=HTML&sort=' + inSort + '&order=' + inOrder;
    fetch(apiUrl)
        .then(response => {
            if (!response.ok) {
                alert("response not ok");
                throw new Error(`Network response was not ok: ${response.status}`);
            }
            return response.text();
        })
        .then(data => {
            document.getElementById(elementId).innerHTML = data;
            document.getElementById("refreshindicator").style.display = "none";

            // If sort or order changed, open only the first group
            if (sortChanged || orderChanged || openGroups.length === 0) {
                const firstId = document.querySelector('.group-header td span').id.split('-')[1];
                toggleGroup("group-" + firstId); // Open the first group by default
            } else {
                // Re-open previously open groups if neither sort nor order changed
                openGroups.forEach(groupId => {
                    toggleGroup("group-" + groupId);
                });
            }
        })
        .catch(error => {
            console.error('Error fetching data:', error);
            //alert("Error Fetching List data: " + error);
            document.getElementById("refreshindicator").style.display = "none";
        });
  }



  </script>
</head>
<body onload="fetchList('historyList',sort,order);fetchRunList('runList');startAutoRefresh();">
  
  <%- include('./partials/_header'); %>
  <div class="section no-pad-bot" id="index-banner">
    <div class="container">   
      <h5 class="header orange-text">
        Job Monitor
        <span id="refreshindicator" class="refreshindicator refreshloader"></span>
      </h5>
    </div>
  
      <div class="container">
        <div class="logstable">
        <table>
          <thead>
            <th class="jobType">Icon</th>
            <th class="jobName">
              <a class="sortableHeader" onclick="fetchList('historyList','jobName',(order === 'asc' && sort === 'jobName') ? 'desc' : 'asc');" href="#">JobName</a>
              <span id="jobName-SortIcon" class="material-icons vertMid">&nbsp;</span>
            </th>
            <th class="jobMode">Mode</th>
            <th class="jobRunDate">
              <a class="sortableHeader" onclick="fetchList('historyList','runDate',(order === 'asc' && sort === 'runDate') ? 'desc' : 'asc');" href="#">Run Date</a>
              <span id="runDate-SortIcon" class="material-icons vertMid">&nbsp;</span>
            </th>
            <th class="jobRunTime">
              <a class="sortableHeader" onclick="fetchList('historyList','runTime',(order === 'asc' && sort === 'runTime') ? 'desc' : 'asc');" href="#">Run Time</a>
              <span id="runTime-SortIcon" class="material-icons vertMid">&nbsp;</span>
            </th>
            <th class="jobSuccess">Success (%)</th>
            <th class="jobActions">
              <a class="sortableHeader" onclick="fetchList('historyList','status',(order === 'asc' && sort === 'status') ? 'desc' : 'asc');" href="#">Status</a>
              <span id="status-SortIcon" class="material-icons vertMid">&nbsp;</span>
            </th>
            <th class="shortcol">Actions</th>
          </thead>
          <tbody id="runList"></tbody>
          <tbody id="historyList"></tbody>
        </table>
      </div>
    </div>
  </div>
  </div>  
  </div>

  <div id="logViewerModal" class="modal modal-fixed-footer" >
    <div class="modal-content">
      <pre id="modal-log-data">-LOGDATA-</pre>
    </div>
    <div class="modal-footer">
      <div style="display:block;float:left;padding-left:20px;">
        <span id="modal-icon" class="material-icons vertMid" style="font-size:24pt">-ICON-</span>
        &nbsp;
        <span class="header" id="modal-jobname" style="font-size:18pt;position:relative;top:5px;">-JOBNAME-</span>
      </div>
      <a href="#!" class="modal-close waves-effect waves-green btn-flat">Close</a>
    </div>
  </div>
  <footer>
  <%- include('./partials/_footer'); %>
  </footer>



  <script>
    document.addEventListener('DOMContentLoaded', function() {
      var elems = document.querySelectorAll('.modal');
      var instances = M.Modal.init(elems, {});
    });
  </script>
  </body>
</html>
